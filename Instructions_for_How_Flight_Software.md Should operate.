#Instructions for how flight software and GUI should operate

##Overview of Flight Software

This flight software for your 2023-2024 CanSat project is structured to handle both data processing and visualization, using Python libraries like Pandas, PySimpleGUI, and Matplotlib. Here’s how it operates:

1. **Data Initialization**: The `CanSat` class holds a dictionary, `data`, to store telemetry information, including altitude, air speed, temperature, and GPS details. Each parameter has a placeholder value that is updated with real telemetry data read from a CSV file.

2. **Data Loading**: On startup, the software tries to load historical data from the specified CSV file path (`self.csv_file_path`). If successful, it initializes a Pandas DataFrame (`self.df`) with the file's contents. This CSV holds telemetry data rows, each recording a snapshot of telemetry parameters.

3. **GUI Layout**: The GUI consists of rows displaying telemetry data and graphs for parameters like altitude, air speed, temperature, and pressure. It uses color themes and custom fonts to enhance readability. The `create_gui_layout` function builds the overall GUI structure by combining individual rows generated by functions like `create_top_banner` and `create_fourth_row`. It also uses `FigureCanvasTkAgg` to embed Matplotlib graphs into the GUI.

4. **Graphs Initialization**: The `self.graphs` dictionary stores graphs for each parameter, such as altitude and GPS location, using Matplotlib. Each graph is customized to fit the GUI's color scheme and to display data trends over time.

5. **CSV Data Reading**: The `read_latest_csv_data` function reads the latest row of telemetry data from the CSV file. This function also handles simulation mode, where data can be emulated rather than live-fed, but the specific simulation code isn’t fully implemented here. The data columns match the CSV structure and allow updates to parameters like `TEAM_ID`, `MISSION_TIME`, `ALTITUDE`, and `TEMPERATURE`.

6. **Command Processing**: The top banner includes a dropdown to select commands (e.g., turning simulation mode on or off, setting GPS time). These commands can be issued to the CanSat system to alter its state or mode during operation.

If any other files or libraries (e.g., external CSV, serial communication libraries) are needed for specific functions, let me know, and I can provide more targeted support.

